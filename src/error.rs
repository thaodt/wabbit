//! The Wabbit compiler's Error Handling System
//!
//! Provides error types and handling for:
//! - Syntax errors during lexing/parsing
//! - Type errors during semantic analysis
//! - Runtime errors during execution
//!
//! Each error includes source location information for meaningful error reporting.

use crate::input::ErrorContext;
use crate::opts_handle::{BinOpKind, CompOpKind, FuncName, TypeName, UnaryOpKind, VarName};
use crate::token::Token;
use crate::types::Value;

use thiserror::Error;

/// Syntax errors
#[derive(Error, Debug, PartialEq)]
pub enum SyntaxError {
    #[error("Unexpected character '{0}'.")]
    UnexpectedChar(char),

    #[error("Unexpected token: {0}.")]
    UnexpectedToken(Token),

    #[error("Unexpected end of file.")]
    UnexpectedEOF,

    #[error("Unknown variable {0}.")]
    UnknownVar(VarName),

    #[error("Cannot assign to undeclared variable {0}.")]
    AssignToUndeclaredVar(VarName),

    #[error("Cannot assign to const variable {0}.")]
    AssignToConst(VarName),

    #[error("Unknown type {0}.")]
    UnknownType(TypeName),

    #[error("Cannot assign to variable {0} of type {1} with value of type {2}.")]
    InconsistentType(VarName, TypeName, TypeName),

    #[error("Cannot use unset variable {0}.")]
    UnsetVar(VarName),

    #[error("Cannot declare variable {0} without type nor value.")]
    NoTypeOrVal(VarName),

    #[error("Cannot apply unary operator {0} to value {1}.")]
    UnaryOpErr(UnaryOpKind, Value),

    #[error("Cannot apply binary operator {0} to values {1} and {2}.")]
    BinOpErr(BinOpKind, Value, Value),

    #[error("Incompatible types {1} and {2} for operator {0}.")]
    BinOpTypeErr(BinOpKind, TypeName, TypeName),

    #[error("Cannot apply comparison operator {0} to values {1} and {2}.")]
    CompOpErr(CompOpKind, Value, Value),

    #[error("Cannot divide by zero.")]
    DivByZero,

    #[error("Cannot use if condition {0} as bool.")]
    IfCondNotBool(Value),

    #[error("Cannot use while condition {0} as bool.")]
    WhileCondNotBool(Value),

    #[error("Cannot use break outside of loop.")]
    UnexpectedBreak,

    #[error("Cannot use continue outside of loop.")]
    UnexpectedContinue,

    #[error("Cannot use return outside of function.")]
    UnexpectedRet,

    #[error("Cannot define nested function.")]
    UnexpectedFuncDef,

    #[error("Unknown function {0}.")]
    UnknownFunc(FuncName),

    #[error("wrong number of arguments for function {0}: expected {1}, got {2}.")]
    WrongNumberOfArgs(FuncName, usize, usize),

    #[error("Cannot pass argument {0} of type {1} with value of type {2}.")]
    InconsistentArgType(VarName, TypeName, TypeName),

    #[error("reached end of function {0} without return statement.")]
    MissingReturnStmt(FuncName),
}

/// Errors generated by the tokenizer
#[derive(Error, Debug, PartialEq)]
pub enum TokenError {
    #[error("{1}Syntax error: {0}")]
    SyntaxErr(Box<SyntaxError>, Box<ErrorContext>),
}
